//
// This source file is part of the Stanford Spezi open-source project
//
// SPDX-FileCopyrightText: 2025 Stanford University and the project authors (see CONTRIBUTORS.md)
//
// SPDX-License-Identifier: MIT
//

%{
from typing import Optional

def localeDependentUnit(*, us: str, uk: Optional[str] = None, metric: str) -> str:
    if uk:
        return f'localeDependentUnit(us: {us}, uk: {uk}, metric: {metric})'
    else:
        return f'localeDependentUnit(us: {us}, metric: {metric})'


class Availability(object):
    def __init__(self, *, iOS: Optional[str] = None, macOS: Optional[str] = None, watchOS: Optional[str] = None):
        self.iOS = iOS
        self.macOS = macOS
        self.watchOS = watchOS
    
    def components(self) -> list[str]:
        components = []
        if self.iOS is not None:
            components.append(f'iOS {self.iOS}')
        if self.macOS is not None:
            components.append(f'macOS {self.macOS}')
        if self.watchOS is not None:
            components.append(f'watchOS {self.watchOS}')
        return components


class SampleType(object):
    def __init__(
        self,
        *,
        availability: Optional[Availability] = None,
        identifier: str,
        property_name: Optional[str],
        display_title: str,
        extra_init_params: list[tuple[str, any]] = [],
        doc: str
    ):
        self.availability = availability
        self.identifier = identifier
        self.property_name = property_name or identifier
        self.display_title = display_title
        self.extra_init_params = [(k,v) for k,v in extra_init_params if v is not None]
        self.doc = doc
    
    @staticmethod
    def quantity_type(
        *,
        availability: Optional[Availability] = None,
        identifier: str,
        property_name: Optional[str] = None,
        display_title: str,
        display_unit: str,
        expected_values_range: Optional[str] = None,
        doc: str
    ) -> 'Self':
        return SampleType(
            availability=availability,
            identifier=identifier,
            property_name=property_name,
            display_title=display_title,
            extra_init_params=[
                ('displayUnit', display_unit),
                ('expectedValuesRange', expected_values_range)
            ],
            doc=doc
        )
    
    @staticmethod
    def category_type(
        *,
        availability: Optional[Availability] = None,
        identifier: str,
        property_name: Optional[str] = None,
        display_title: str,
        doc: str
    ) -> 'Self':
        return SampleType(
            availability=availability,
            identifier=identifier,
            property_name=property_name,
            display_title=display_title,
            doc=doc
        )
    
    @staticmethod
    def correlation_type(
        *,
        availability: Optional[Availability] = None,
        identifier: str,
        property_name: Optional[str] = None,
        display_title: str,
        associated_quantity_types: list[str],
        doc: str
    ) -> 'Self':
        return SampleType(
            availability=availability,
            identifier=identifier,
            property_name=property_name,
            display_title=display_title,
            extra_init_params=[
                ('associatedQuantityTypes', '[' + (', '.join(map(lambda t: f'.{t}', associated_quantity_types))) + ']')
            ],
            doc=doc
        )
        
    @staticmethod
    def clinical_type(
        *,
        availability: Optional[Availability] = None,
        identifier: str,
        property_name: Optional[str] = None,
        display_title: str,
        doc: str
    ) -> 'Self':
        return SampleType(
            availability=availability,
            identifier=identifier,
            property_name=property_name,
            display_title=display_title,
            doc=doc
        )


quantity_types = [
    # Activity
    SampleType.quantity_type(
        identifier='stepCount',
        display_title='Step Count',
        display_unit='.count()',
        doc='A quantity sample type that measures the number of steps the user has taken.'
    ),
    SampleType.quantity_type(
        identifier='distanceWalkingRunning',
        display_title='Walking + Running Distance',
        display_unit=localeDependentUnit(us='.mile()', metric='.meterUnit(with: .kilo)'),
        doc='A quantity sample type that measures the distance the user has moved by walking or running.'
    ),
    SampleType.quantity_type(
        identifier='runningGroundContactTime',
        display_title='Ground Contact Time',
        display_unit='.secondUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of time the runner’s foot is in contact with the ground while running.'
    ),
    SampleType.quantity_type(
        identifier='runningPower',
        display_title='Running Power',
        display_unit='.watt()',
        doc='A quantity sample type that measures the rate of work required for the runner to maintain their speed.'
    ),
    SampleType.quantity_type(
        identifier='runningSpeed',
        display_title='Running Speed',
        display_unit=localeDependentUnit(us='.mile() / .hour()', metric='.meterUnit(with: .kilo) / .hour()'),
        doc='A quantity sample type that measures the runner’s speed.'
    ),
    SampleType.quantity_type(
        identifier='runningStrideLength',
        display_title='Running Stride Length',
        display_unit=localeDependentUnit(us='.foot()', metric='.meter()'),
        doc='A quantity sample type that measures the distance covered by a single step while running.'
    ),
    SampleType.quantity_type(
        identifier='runningVerticalOscillation',
        display_title='Vertical Oscillation',
        display_unit=localeDependentUnit(us='.inch()', metric='.meterUnit(with: .centi)'),
        doc='A quantity sample type measuring pelvis vertical range of motion during a single running stride.'
    ),
    SampleType.quantity_type(
        identifier='distanceCycling',
        display_title='Cycling Distance',
        display_unit=localeDependentUnit(us='.mile()', metric='.meterUnit(with: .kilo)'),
        doc='A quantity sample type that measures the distance the user has moved by cycling.'
    ),
    SampleType.quantity_type(
        identifier='pushCount',
        display_title='Pushes',
        display_unit='.count()',
        doc='A quantity sample type that measures the number of pushes that the user has performed while using a wheelchair.'
    ),
    SampleType.quantity_type(
        identifier='distanceWheelchair',
        display_title='Wheelchair Distance',
        display_unit=localeDependentUnit(us='.mile()', metric='.meterUnit(with: .kilo)'),
        doc='A quantity sample type that measures the distance the user has moved using a wheelchair.'
    ),
    SampleType.quantity_type(
        identifier='swimmingStrokeCount',
        display_title='Swimming Strokes',
        display_unit='.count()',
        doc='A quantity sample type that measures the number of strokes performed while swimming.'
    ),
    SampleType.quantity_type(
        identifier='distanceSwimming',
        display_title='Swimming Distance',
        display_unit=localeDependentUnit(us='.yard()', uk='.yard()', metric='.meter()'),
        doc='A quantity sample type that measures the distance the user has moved while swimming.'
    ),
    SampleType.quantity_type(
        identifier='distanceDownhillSnowSports',
        display_title='Downhill Snow Sports Distance',
        display_unit=localeDependentUnit(us='.mile()', metric='.meterUnit(with: .kilo)'),
        doc='A quantity sample type that measures the distance the user has traveled while skiing or snowboarding.'
    ),
    SampleType.quantity_type(
        identifier='basalEnergyBurned',
        display_title='Resting Energy',
        display_unit='.largeCalorie()',
        doc='A quantity sample type that measures the resting energy burned by the user.'
    ),
    SampleType.quantity_type(
        identifier='activeEnergyBurned',
        display_title='Active Energy',
        display_unit='.largeCalorie()',
        doc='A quantity sample type that measures the amount of active energy the user has burned.'
    ),
    SampleType.quantity_type(
        identifier='flightsClimbed',
        display_title='Flights Climbed',
        display_unit='.count()',
        doc='A quantity sample type that measures the number flights of stairs that the user has climbed.'
    ),
#    SampleType.quantity_type(
#        'nikeFuel',
#        'TITLE',
#        'A quantity sample type that measures the number of NikeFuel points the user has earned.'
#    ),
    SampleType.quantity_type(
        identifier='appleExerciseTime',
        display_title='Exercise Minutes',
        display_unit='.minute()',
        doc='A quantity sample type that measures the amount of time the user spent exercising.'
    ),
    SampleType.quantity_type(
        identifier='appleMoveTime',
        display_title='Move Minutes',
        display_unit='.minute()',
        doc='A quantity sample type that measures the amount of time the user has spent performing activities that involve full-body movements during the specified day.'
    ),
    SampleType.quantity_type(
        identifier='appleStandTime',
        display_title='Stand Hours',
        display_unit='.hour()',
        doc='A quantity sample type that measures the amount of time the user has spent standing.'
    ),
    SampleType.quantity_type(
        identifier='vo2Max',
        display_title='VO₂ max',
        display_unit='.literUnit(with: .milli) / (.gramUnit(with: .kilo) / .minute())',
        doc='A quantity sample that measures the maximal oxygen consumption during exercise.'
    ),
    # Body Measurements
    SampleType.quantity_type(
        identifier='height',
        display_title='Height',
        display_unit=localeDependentUnit(us='.foot()', metric='.meter()'),
        doc='A quantity sample type that measures the user’s height.'
    ),
    SampleType.quantity_type(
        identifier='bodyMass',
        display_title='Body Mass',
        display_unit=localeDependentUnit(us='.pound()', uk='.pound()', metric='.gramUnit(with: .kilo)'),
        doc='A quantity sample type that measures the user’s weight.'
    ),
    SampleType.quantity_type(
        identifier='bodyMassIndex',
        display_title='Body Mass Index',
        display_unit='.count()',
        doc='A quantity sample type that measures the user’s body mass index.'
    ),
    SampleType.quantity_type(
        identifier='leanBodyMass',
        display_title='Lean Body Mass',
        display_unit=localeDependentUnit(us='.pound()', uk='.pound()', metric='.gramUnit(with: .kilo)'),
        doc='A quantity sample type that measures the user’s lean body mass.'
    ),
    SampleType.quantity_type(
        identifier='bodyFatPercentage',
        display_title='Body Fat Percentage',
        display_unit='.percent()',
        doc='A quantity sample type that measures the user’s body fat percentage.'
    ),
    SampleType.quantity_type(
        identifier='waistCircumference',
        display_title='Waist Circumference',
        display_unit=localeDependentUnit(us='.inch()', metric='.meterUnit(with: .centi)'),
        doc='A quantity sample type that measures the user’s waist circumference.'
    ),
    SampleType.quantity_type(
        identifier='appleSleepingWristTemperature',
        display_title='Wrist Temperature',
        display_unit=localeDependentUnit(us='.degreeFahrenheit()', metric='.degreeCelsius()'),
        doc='A quantity sample type that records the wrist temperature during sleep.'
    ),
    # Reproductive Health
    SampleType.quantity_type(
        identifier='basalBodyTemperature',
        display_title='Basal Body Temperature',
        display_unit=localeDependentUnit(us='.degreeFahrenheit()', metric='.degreeCelsius()'),
        doc='A quantity sample type that records the user’s basal body temperature.'
    ),
    # Hearing
    SampleType.quantity_type(
        identifier='environmentalAudioExposure',
        display_title='Environmental Audio Exposure',
        display_unit='.decibelHearingLevel()',
        doc='A quantity sample type that measures audio exposure to sounds in the environment.'
    ),
    SampleType.quantity_type(
        identifier='headphoneAudioExposure',
        display_title='Headphone Audio Exposure',
        display_unit='.decibelHearingLevel()',
        doc='A quantity sample type that measures audio exposure from headphones.'
    ),
    # Vital Signs
    SampleType.quantity_type(
        identifier='heartRate',
        display_title='Heart Rate',
        display_unit='.count() / .minute()',
        expected_values_range='0...175',
        doc='A quantity sample type that measures the user’s heart rate.'
    ),
    SampleType.quantity_type(
        identifier='restingHeartRate',
        display_title='Resting Heart Rate',
        display_unit='.count() / .minute()',
        doc='A quantity sample type that measures the user’s resting heart rate.'
    ),
    SampleType.quantity_type(
        identifier='walkingHeartRateAverage',
        display_title='Walking Heart Rate Average',
        display_unit='.count() / .minute()',
        doc='A quantity sample type that measures the user’s heart rate while walking.'
    ),
    SampleType.quantity_type(
        identifier='heartRateVariabilitySDNN',
        display_title='Heart Rate Variability',
        display_unit='.secondUnit(with: .milli)',
        doc='A quantity sample type that measures the standard deviation of heartbeat intervals.'
    ),
    SampleType.quantity_type(
        identifier='heartRateRecoveryOneMinute',
        display_title='Cardio Recovery',
        display_unit='.count() / .minute()', # might not be the correct unit; docs say count, but the health app seems to use BPM?
        doc='A quantity sample that records the reduction in heart rate from the peak exercise rate to the rate one minute after exercising ended.'
    ),
    SampleType.quantity_type(
        identifier='atrialFibrillationBurden',
        display_title='Atrial Fibrillation',
        display_unit='.percent()',
        doc='A quantity type that measures an estimate of the percentage of time a person’s heart shows signs of atrial fibrillation (AFib) while wearing Apple Watch.'
    ),
    SampleType.quantity_type(
        identifier='oxygenSaturation',
        property_name='bloodOxygen',
        display_title='Blood Oxygen',
        display_unit='.percent()',
        expected_values_range='80...105',
        doc='A quantity sample type that measures the user’s oxygen saturation.'
    ),
    SampleType.quantity_type(
        identifier='bodyTemperature',
        display_title='Body Temperature',
        display_unit=localeDependentUnit(us='.degreeFahrenheit()', metric='.degreeCelsius()'),
        doc='A quantity sample type that measures the user’s body temperature.'
    ),
    SampleType.quantity_type(
        identifier='bloodPressureDiastolic',
        display_title='Blood Pressure (Diastolic)',
        display_unit='.millimeterOfMercury()',
        doc='A quantity sample type that measures the user’s diastolic blood pressure.'
    ),
    SampleType.quantity_type(
        identifier='bloodPressureSystolic',
        display_title='Blood Pressure (Systolic)',
        display_unit='.millimeterOfMercury()',
        doc='A quantity sample type that measures the user’s systolic blood pressure.'
    ),
    SampleType.quantity_type(
        identifier='respiratoryRate',
        display_title='Respiratory Rate',
        display_unit='.count() / .minute()',
        doc='A quantity sample type that measures the user’s respiratory rate.'
    ),

    # Lab and Test Results
    SampleType.quantity_type(
        identifier='bloodGlucose',
        display_title='Blood Glucose',
        display_unit='.gramUnit(with: .milli) / .literUnit(with: .deci)',
        doc='A quantity sample type that measures the user’s blood glucose level.'
    ),
    SampleType.quantity_type(
        identifier='electrodermalActivity',
        display_title='Electrodermal Activity',
        display_unit='.siemenUnit(with: .micro)',
        doc='A quantity sample type that measures electrodermal activity.'
    ),
    SampleType.quantity_type(
        identifier='forcedExpiratoryVolume1',
        display_title='Forced Expiratory Volume, 1 sec',
        display_unit='.liter()',
        doc='A quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs during the first second of a forced exhalation.'
    ),
    SampleType.quantity_type(
        identifier='forcedVitalCapacity',
        display_title='Forced Vital Capacity',
        display_unit='.liter()',
        doc='A quantity sample type that measures the amount of air that can be forcibly exhaled from the lungs after taking the deepest breath possible.'
    ),
    SampleType.quantity_type(
        identifier='inhalerUsage',
        display_title='Inhaler Usage',
        display_unit='.count()',
        doc='A quantity sample type that measures the number of puffs the user takes from their inhaler.'
    ),
    SampleType.quantity_type(
        identifier='insulinDelivery',
        display_title='Insulin Delivery',
        display_unit='.internationalUnit()',
        doc='A quantity sample that measures the amount of insulin delivered.'
    ),
    SampleType.quantity_type(
        identifier='numberOfTimesFallen',
        display_title='Number of Times Fallen',
        display_unit='.count()',
        doc='A quantity sample type that measures the number of times the user fell.'
    ),
    SampleType.quantity_type(
        identifier='peakExpiratoryFlowRate',
        display_title='Peak Expiratory Flow Rate',
        display_unit='.liter() / .minute()',
        doc='A quantity sample type that measures the user’s maximum flow rate generated during a forceful exhalation.'
    ),
    SampleType.quantity_type(
        identifier='peripheralPerfusionIndex',
        display_title='Peripheral Perfusion Index',
        display_unit='.percent()',
        doc='A quantity sample type that measures the user’s peripheral perfusion index.'
    ),

    # Nutrition
    SampleType.quantity_type(
        identifier='dietaryBiotin',
        display_title='Biotin',
        display_unit='.gramUnit(with: .micro)',
        doc='A quantity sample type that measures the amount of biotin (vitamin B7) consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryCaffeine',
        display_title='Caffeine',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of caffeine consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryCalcium',
        display_title='Calcium',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of calcium consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryCarbohydrates',
        display_title='Carbohydrates',
        display_unit='.gram()',
        doc='A quantity sample type that measures the amount of carbohydrates consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryChloride',
        display_title='Chloride',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of chloride consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryCholesterol',
        display_title='Cholesterol',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of cholesterol consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryChromium',
        display_title='Chromium',
        display_unit='.gramUnit(with: .micro)',
        doc='A quantity sample type that measures the amount of chromium consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryCopper',
        display_title='Copper',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of copper consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryEnergyConsumed',
        display_title='Dietary Energy Consumed',
        display_unit='.largeCalorie()',
        doc='A quantity sample type that measures the amount of energy consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryFatMonounsaturated',
        display_title='Monounsaturated Fat',
        display_unit='.gram()',
        doc='A quantity sample type that measures the amount of monounsaturated fat consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryFatPolyunsaturated',
        display_title='Polyunsaturated Fat',
        display_unit='.gram()',
        doc='A quantity sample type that measures the amount of polyunsaturated fat consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryFatSaturated',
        display_title='Saturated Fat',
        display_unit='.gram()',
        doc='A quantity sample type that measures the amount of saturated fat consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryFatTotal',
        display_title='Total Fat',
        display_unit='.gram()',
        doc='A quantity sample type that measures the total amount of fat consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryFiber',
        display_title='Fiber',
        display_unit='.gram()',
        doc='A quantity sample type that measures the amount of fiber consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryFolate',
        display_title='Folate',
        display_unit='.gramUnit(with: .micro)',
        doc='A quantity sample type that measures the amount of folate (folic acid) consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryIodine',
        display_title='Iodine',
        display_unit='.gramUnit(with: .micro)',
        doc='A quantity sample type that measures the amount of iodine consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryIron',
        display_title='Iron',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of iron consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryMagnesium',
        display_title='Magnesium',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of magnesium consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryManganese',
        display_title='Manganese',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of manganese consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryMolybdenum',
        display_title='Molybdenum',
        display_unit='.gramUnit(with: .micro)',
        doc='A quantity sample type that measures the amount of molybdenum consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryNiacin',
        display_title='Niacin',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of niacin (vitamin B3) consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryPantothenicAcid',
        display_title='Pantothenic Acid',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of pantothenic acid (vitamin B5) consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryPhosphorus',
        display_title='Phosphorus',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of phosphorus consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryPotassium',
        display_title='Potassium',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of potassium consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryProtein',
        display_title='Protein',
        display_unit='.gram()',
        doc='A quantity sample type that measures the amount of protein consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryRiboflavin',
        display_title='Riboflavin',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of riboflavin (vitamin B2) consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietarySelenium',
        display_title='Selenium',
        display_unit='.gramUnit(with: .micro)',
        doc='A quantity sample type that measures the amount of selenium consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietarySodium',
        display_title='Sodium',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of sodium consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietarySugar',
        display_title='Sugar',
        display_unit='.gram()',
        doc='A quantity sample type that measures the amount of sugar consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryThiamin',
        display_title='Thiamin',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of thiamin (vitamin B1) consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryVitaminA',
        display_title='Vitamin A',
        display_unit='.gramUnit(with: .micro)',
        doc='A quantity sample type that measures the amount of vitamin A consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryVitaminB12',
        display_title='Vitamin B12',
        display_unit='.gramUnit(with: .micro)',
        doc='A quantity sample type that measures the amount of cyanocobalamin (vitamin B12) consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryVitaminB6',
        display_title='Vitamin B6',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of pyridoxine (vitamin B6) consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryVitaminC',
        display_title='Vitamin C',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of vitamin C consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryVitaminD',
        display_title='Vitamin D',
        display_unit='.gramUnit(with: .micro)',
        doc='A quantity sample type that measures the amount of vitamin D consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryVitaminE',
        display_title='Vitamin E',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of vitamin E consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryVitaminK',
        display_title='Vitamin K',
        display_unit='.gramUnit(with: .micro)',
        doc='A quantity sample type that measures the amount of vitamin K consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryWater',
        display_title='Water',
        display_unit=localeDependentUnit(us='.fluidOunceUS()', metric='.literUnit(with: .milli)'),
        doc='A quantity sample type that measures the amount of water consumed.'
    ),
    SampleType.quantity_type(
        identifier='dietaryZinc',
        display_title='Zinc',
        display_unit='.gramUnit(with: .milli)',
        doc='A quantity sample type that measures the amount of zinc consumed.'
    ),

    # Alcohol Consumption
    SampleType.quantity_type(
        identifier='bloodAlcoholContent',
        display_title="Blood Alcohol Content",
        display_unit='.percent()',
        doc='A quantity sample type that measures the user’s blood alcohol content.'
    ),
    SampleType.quantity_type(
        identifier='numberOfAlcoholicBeverages',
        display_title='Alcohol Consumption', # 'Number of Alcoholic Beverages'?
        display_unit='.count()',
        doc='A quantity sample type that measures the number of standard alcoholic drinks that the user has consumed.'
    ),

    # Mobility
    SampleType.quantity_type(
        identifier='appleWalkingSteadiness',
        display_title='Walking Steadiness',
        display_unit='.percent()',
        doc='A quantity sample type that measures the steadiness of the user’s gait.'
    ),
    SampleType.quantity_type(
        identifier='sixMinuteWalkTestDistance',
        display_title='Six-Minute Walk Distance',
        display_unit='.meter()',
        doc='A quantity sample type that stores the distance a user can walk during a six-minute walk test.'
    ),
    SampleType.quantity_type(
        identifier='walkingSpeed',
        display_title='Walking Speed',
        display_unit=localeDependentUnit(us='.mile() / .hour()', metric='.meterUnit(with: .kilo) / .hour()'),
        doc='A quantity sample type that measures the user’s average speed when walking steadily over flat ground.'
    ),
    SampleType.quantity_type(
        identifier='walkingStepLength',
        display_title='Walking Step Length',
        display_unit=localeDependentUnit(us='.inch()', metric='.meterUnit(with: .centi)'),
        doc='A quantity sample type that measures the average length of the user’s step when walking steadily over flat ground.'
    ),
    SampleType.quantity_type(
        identifier='walkingAsymmetryPercentage',
        display_title='Walking Asymmetry',
        display_unit='.percent()',
        doc='A quantity sample type that measures the percentage of steps in which one foot moves at a different speed than the other when walking on flat ground.'
    ),
    SampleType.quantity_type(
        identifier='walkingDoubleSupportPercentage',
        display_title='Double Support Time',
        display_unit='.percent()',
        doc='A quantity sample type that measures the percentage of time when both of the user’s feet touch the ground while walking steadily over flat ground.'
    ),
    SampleType.quantity_type(
        identifier='stairAscentSpeed',
        display_title='Stair Speed (Up)',
        display_unit=localeDependentUnit(us='.foot() / .second()', metric='.meter() / .second()'),
        doc='A quantity sample type measuring the user’s speed while climbing a flight of stairs.'
    ),
    SampleType.quantity_type(
        identifier='stairDescentSpeed',
        display_title='Stair Speed (Down)',
        display_unit=localeDependentUnit(us='.foot() / .second()', metric='.meter() / .second()'),
        doc='A quantity sample type measuring the user’s speed while descending a flight of stairs.'
    ),

    # UV Exposure
    SampleType.quantity_type(
        identifier='uvExposure',
        display_title='UV Index',
        display_unit='.count()',
        doc='A quantity sample type that measures the user’s exposure to UV radiation.'
    ),

    # Diving
    SampleType.quantity_type(
        identifier='underwaterDepth',
        display_title='Underwater Depth',
        display_unit=localeDependentUnit(us='.foot()', metric='.meter()'),
        doc='A quantity sample that records a person’s depth underwater.'
    ),
    SampleType.quantity_type(
        identifier='waterTemperature',
        display_title='Water Temperature',
        display_unit=localeDependentUnit(us='.degreeFahrenheit()', metric='.degreeCelsius()'),
        doc=' A quantity sample that records the water temperature.'
    ),

    # Other
    SampleType.quantity_type(
        availability=Availability(iOS='18.0', macOS='15.0', watchOS='11.0'),
        identifier='appleSleepingBreathingDisturbances',
        display_title='Sleeping Breathing Disturbances',
        display_unit='.count()',
        doc='A quantity sample that records breathing disturbances during sleep.'
    ),
    SampleType.quantity_type(
        availability=Availability(iOS='18.0', macOS='15.0', watchOS='11.0'),
        identifier='crossCountrySkiingSpeed',
        display_title='Cross-Country Skiing Speed',
        display_unit=localeDependentUnit(us='.mile() / .hour()', metric='.meterUnit(with: .kilo) / .hour()'),
        doc='A quantity sample that records cross-country skiing speed.'
    ),
    SampleType.quantity_type(
        identifier='cyclingCadence',
        display_title='Cycling Cadence',
        display_unit='.count() / .minute()', # TODO check this!!!
        doc='A quantity sample that records cycling cadence.'
    ),
    SampleType.quantity_type(
        identifier='cyclingFunctionalThresholdPower',
        display_title='Cycling Functional Threshold Power',
        display_unit='.watt()',
        doc='A quantity sample that records cycling functional threshold power.'
    ),
    SampleType.quantity_type(
        identifier='cyclingPower',
        display_title='Cycling Power',
        display_unit='.watt()',
        doc='A quantity sample that records cycling power.'
    ),
    SampleType.quantity_type(
        identifier='cyclingSpeed',
        display_title='Cycling Speed',
        display_unit=localeDependentUnit(us='.mile() / .hour()', metric='.meterUnit(with: .kilo) / .hour()'),
        doc='A quantity sample that records cycling speed.'
    ),
    SampleType.quantity_type(
        availability=Availability(iOS='18.0', macOS='15.0', watchOS='11.0'),
        identifier='distanceCrossCountrySkiing',
        display_title='Cross-Country Skiing Distance',
        display_unit=localeDependentUnit(us='.mile()', metric='.meterUnit(with: .kilo)'),
        doc='A quantity sample that records cross-country skiing distance.'
    ),
    SampleType.quantity_type(
        availability=Availability(iOS='18.0', macOS='15.0', watchOS='11.0'),
        identifier='distancePaddleSports',
        display_title='Paddle Sports Distance',
        display_unit=localeDependentUnit(us='.mile()', metric='.meterUnit(with: .kilo)'),
        doc='A quantity sample that records paddle sports distance.'
    ),
    SampleType.quantity_type(
        availability=Availability(iOS='18.0', macOS='15.0', watchOS='11.0'),
        identifier='distanceRowing',
        display_title='Rowing Distance',
        display_unit=localeDependentUnit(us='.mile()', metric='.meterUnit(with: .kilo)'),
        doc='A quantity sample that records rowing distance.'
    ),
    SampleType.quantity_type(
        availability=Availability(iOS='18.0', macOS='15.0', watchOS='11.0'),
        identifier='distanceSkatingSports',
        display_title='Skating Sports Distance',
        display_unit=localeDependentUnit(us='.mile()', metric='.meterUnit(with: .kilo)'),
        doc='A quantity sample that records skating sports distance.'
    ),
    SampleType.quantity_type(
        identifier='environmentalSoundReduction',
        display_title='Environmental Sound Reduction',
        display_unit='.decibelHearingLevel()',
        doc='A quantity sample that records environmental sound reduction.'
    ),
    SampleType.quantity_type(
        availability=Availability(iOS='18.0', macOS='15.0', watchOS='11.0'),
        identifier='estimatedWorkoutEffortScore',
        display_title='Estimated Workout Effort Score',
        display_unit='.count()', # TODO not sure about this one
        doc='A quantity sample that records estimated physical effort during workouts.'
    ),
    SampleType.quantity_type(
        availability=Availability(iOS='18.0', macOS='15.0', watchOS='11.0'),
        identifier='paddleSportsSpeed',
        display_title='Paddle Sports Speed',
        display_unit=localeDependentUnit(us='.mile() / .hour()', metric='.meterUnit(with: .kilo) / .hour()'),
        doc='A quantity sample that records paddle sports speed.'
    ),
    SampleType.quantity_type(
        identifier='physicalEffort',
        display_title='Physical Effort',
        display_unit='.kilocalorie() / (.gramUnit(with: .kilo) * .hour())',
        doc='A quantity sample that records physical effort.'
    ),
    SampleType.quantity_type(
        availability=Availability(iOS='18.0', macOS='15.0', watchOS='11.0'),
        identifier='rowingSpeed',
        display_title='Rowing Speed',
        display_unit=localeDependentUnit(us='.mile() / .hour()', metric='.meterUnit(with: .kilo) / .hour()'),
        doc='A quantity sample that records rowing speed.'
    ),
    SampleType.quantity_type(
        identifier='timeInDaylight',
        display_title='Time In Daylight',
        display_unit='.minute()',
        doc='A quantity sample that records time spent in daylight.'
    ),
    SampleType.quantity_type(
        availability=Availability(iOS='18.0', macOS='15.0', watchOS='11.0'),
        identifier='workoutEffortScore',
        display_title='Workout Effort Score',
        display_unit='.count()', # TODO not sure about this one
        doc='A quantity sample that records workout effort.'
    ),


]


category_types = [
    # Activity
    SampleType.category_type(
        identifier='appleStandHour',
        display_title='Stand Hours',
        doc='A category sample type that counts the number of hours in the day during which the user has stood and moved for at least one minute per hour.'
    ),
    SampleType.category_type(
        identifier='lowCardioFitnessEvent',
        display_title='Low Cardio Fitness Event',
        doc='An event that indicates the user’s VO2 max values consistently fall below a particular aerobic fitness threshold.'
    ),

    # MARK: Reproductive Health
    SampleType.category_type(
        identifier='menstrualFlow',
        display_title='Menstrual Cycles',
        doc='A category sample type that records menstrual cycles.'
    ),
    SampleType.category_type(
        identifier='intermenstrualBleeding',
        display_title='Spotting',
        doc='A category sample type that records spotting outside the normal menstruation period.'
    ),
    SampleType.category_type(
        identifier='infrequentMenstrualCycles',
        display_title='Infrequent Periods',
        doc='A category sample that indicates an infrequent menstrual cycle.'
    ),
    SampleType.category_type(
        identifier='irregularMenstrualCycles',
        display_title='Irregular Cycles',
        doc='A category sample that indicates an irregular menstrual cycle.'
    ),
    SampleType.category_type(
        identifier='persistentIntermenstrualBleeding',
        display_title='Persistent Spotting',
        doc='A category sample that indicates persistent intermenstrual bleeding.'
    ),
    SampleType.category_type(
        identifier='prolongedMenstrualPeriods',
        display_title='Prolonged Periods',
        doc='A category sample that indicates a prolonged menstrual cycle.'
    ),
    SampleType.category_type(
        identifier='cervicalMucusQuality',
        display_title='Cervical Mucus Quality',
        doc='A category sample type that records the quality of the user’s cervical mucus.'
    ),
    SampleType.category_type(
        identifier='ovulationTestResult',
        display_title='Ovulation Test Result',
        doc='A category sample type that records the result of an ovulation home test.'
    ),
    SampleType.category_type(
        identifier='progesteroneTestResult',
        display_title='Progesterone Test Result',
        doc='A category type that represents the results from a home progesterone test.'
    ),
    SampleType.category_type(
        identifier='sexualActivity',
        display_title='Sexual Activity',
        doc='A category sample type that records sexual activity.'
    ),
    SampleType.category_type(
        identifier='contraceptive',
        display_title='Contraceptives',
        doc='A category sample type that records the use of contraceptives.'
    ),
    SampleType.category_type(
        identifier='pregnancy',
        display_title='Pregnancy',
        doc='A category type that records pregnancy.'
    ),
    SampleType.category_type(
        identifier='pregnancyTestResult',
        display_title='Pregnancy Test Result',
        doc='A category type that represents the results from a home pregnancy test.'
    ),
    SampleType.category_type(
        identifier='lactation',
        display_title='Lactation',
        doc='A category type that records lactation.'
    ),

    # Hearing
    SampleType.category_type(
        identifier='environmentalAudioExposureEvent',
        display_title='Environmental Audio Exposure Event',
        doc='A category sample type that records exposure to potentially damaging sounds from the environment.'
    ),
    SampleType.category_type(
        identifier='headphoneAudioExposureEvent',
        display_title='Headphone Audio Exposure Event',
        doc='A category sample type that records exposure to potentially damaging sounds from headphones.'
    ),

    # Vital Signs
    SampleType.category_type(
        identifier='lowHeartRateEvent',
        display_title='Low Heart Rate Event',
        doc='A category sample type for low heart rate events.'
    ),
    SampleType.category_type(
        identifier='highHeartRateEvent',
        display_title='High Heart Rate Event',
        doc='A category sample type for high heart rate events.'
    ),
    SampleType.category_type(
        identifier='irregularHeartRhythmEvent',
        display_title='Irregular Heart Rythm Event',
        doc='A category sample type for irregular heart rhythm events.'
    ),


    # Mobility
    SampleType.category_type(
        identifier='appleWalkingSteadinessEvent',
        display_title='Walking Steadiness Event',
        doc='A category sample type that records an incident where the user showed a reduced score for their gait’s steadiness.'
    ),

    # Mindfulness and Sleep

    SampleType.category_type(
        identifier='mindfulSession',
        display_title='Mindful Session',
        doc='A category sample type for recording a mindful session.'
    ),
    SampleType.category_type(
        identifier='sleepAnalysis',
        display_title='Sleep Analysis',
        doc='A category sample type for sleep analysis information.'
    ),
    
    # Self Care
    SampleType.category_type(
        identifier='toothbrushingEvent',
        display_title='Toothbrushing Event',
        doc='A category sample type for toothbrushing events.'
    ),
    SampleType.category_type(
        identifier='handwashingEvent',
        display_title='Handwashing Event',
        doc='A category sample type for handwashing events.'
    ),

    # Symptoms
    # Symptoms: Abdominal and Gastrointestinal
    SampleType.category_type(
        identifier='abdominalCramps',
        display_title='Abdominal Cramps',
        doc='A category type that records abdominal cramps as a symptom.'
    ),
    SampleType.category_type(
        identifier='bloating',
        display_title='Bloating',
        doc='A category type that records bloating as a symptom.'
    ),
    SampleType.category_type(
        identifier='constipation',
        display_title='Constipation',
        doc='A category type that records constipation as a symptom.'
    ),
    SampleType.category_type(
        identifier='diarrhea',
        display_title='Diarrhea',
        doc='A category type that records diarrhea as a symptom.'
    ),
    SampleType.category_type(
        identifier='heartburn',
        display_title='Heartburn',
        doc='A category type that records heartburn as a symptom.'
    ),
    SampleType.category_type(
        identifier='nausea',
        display_title='Nausea',
        doc='A category type that records nausea as a symptom.'
    ),
    SampleType.category_type(
        identifier='vomiting',
        display_title='Vomiting',
        doc='A category type that records vomiting as a symptom.'
    ),
    # Symptoms: Constitutional
    SampleType.category_type(
        identifier='appetiteChanges',
        display_title='Appetite Changes',
        doc='A category type that records changes in appetite as a symptom.'
    ),
    SampleType.category_type(
        identifier='chills',
        display_title='Chills',
        doc='A category type that records chills as a symptom.'
    ),
    SampleType.category_type(
        identifier='dizziness',
        display_title='Dizziness',
        doc='A category type that records dizziness as a symptom.'
    ),
    SampleType.category_type(
        identifier='fainting',
        display_title='Fainting',
        doc='A category type that records fainting as a symptom.'
    ),
    SampleType.category_type(
        identifier='fatigue',
        display_title='Fatigue',
        doc='A category type that records fatigue as a symptom.'
    ),
    SampleType.category_type(
        identifier='fever',
        display_title='Fever',
        doc='A category type that records fever as a symptom.'
    ),
    SampleType.category_type(
        identifier='generalizedBodyAche',
        display_title='Generalized Body Ache',
        doc='A category type that records body ache as a symptom.'
    ),
    SampleType.category_type(
        identifier='hotFlashes',
        display_title='Hot Flashes',
        doc='A category type that records hot flashes as a symptom.'
    ),
    # Symptoms: Heart and Lung
    SampleType.category_type(
        identifier='chestTightnessOrPain',
        display_title='Chest Tightness or Pain',
        doc='A category type that records chest tightness or pain as a symptom.'
    ),
    SampleType.category_type(
        identifier='coughing',
        display_title='Coughing',
        doc='A category type that records coughing as a symptom.'
    ),
    SampleType.category_type(
        identifier='rapidPoundingOrFlutteringHeartbeat',
        display_title='Rapid Pounding or Fluttering Heartbeat',
        doc='A category type that records a rapid, pounding, or fluttering heartbeat as a symptom.'
    ),
    SampleType.category_type(
        identifier='shortnessOfBreath',
        display_title='Shortness of Breath',
        doc='A category type that records shortness of breath as a symptom.'
    ),
    SampleType.category_type(
        identifier='skippedHeartbeat',
        display_title='Skipped Heartbeat',
        doc='A category type that records skipped heartbeat as a symptom.'
    ),
    SampleType.category_type(
        identifier='wheezing',
        display_title='Wheezing',
        doc='A category type that records wheezing as a symptom.'
    ),
    # Symptoms: Musculoskeletal
    SampleType.category_type(
        identifier='lowerBackPain',
        display_title='Lower Back Pain',
        doc='A category type that records lower back pain as a symptom.'
    ),
    # Symptoms: Neurological
    SampleType.category_type(
        identifier='headache',
        display_title='Headache',
        doc='A category type that records headache as a symptom.'
    ),
    SampleType.category_type(
        identifier='memoryLapse',
        display_title='Memory Lapse',
        doc='A category type that records memory lapse as a symptom.'
    ),
    SampleType.category_type(
        identifier='moodChanges',
        display_title='Mood Changes',
        doc='A category type that records mood changes as a symptom.'
    ),
    # Symptoms: Nose and Throat
    SampleType.category_type(
        identifier='lossOfSmell',
        display_title='Loss of Smell',
        doc='A category type that records loss of smell as a symptom.'
    ),
    SampleType.category_type(
        identifier='lossOfTaste',
        display_title='Loss of Taste',
        doc='A category type that records loss of taste as a symptom.'
    ),
    SampleType.category_type(
        identifier='runnyNose',
        display_title='Runny Nose',
        doc='A category type that records runny nose as a symptom.'
    ),
    SampleType.category_type(
        identifier='soreThroat',
        display_title='Sore Throat',
        doc='A category type that records sore throat as a symptom.'
    ),
    SampleType.category_type(
        identifier='sinusCongestion',
        display_title='Sinus Congestion',
        doc='A category type that records sinus congestion as a symptom.'
    ),
    # Symptoms: Reproduction
    SampleType.category_type(
        identifier='breastPain',
        display_title='Breast Pain',
        doc='A category type that records breast pain as a symptom.'
    ),
    SampleType.category_type(
        identifier='pelvicPain',
        display_title='Pelvic Pain',
        doc='A category type that records pelvic pain as a symptom.'
    ),
    SampleType.category_type(
        identifier='vaginalDryness',
        display_title='Vaginal Dryness',
        doc='A category type that records vaginal dryness as a symptom.'
    ),
    SampleType.category_type(
        availability=Availability(iOS='18.0', macOS='15.0', watchOS='11.0'),
        identifier='bleedingDuringPregnancy',
        display_title='Bleeding During Pregnancy',
        doc='A category type that records bleeding during pregnancy as a symptom.'
    ),
    SampleType.category_type(
        availability=Availability(iOS='18.0', macOS='15.0', watchOS='11.0'),
        identifier='bleedingAfterPregnancy',
        display_title='Bleeding After Pregnancy',
        doc='A category type that records bleeding after pregnancy as a symptom.'
    ),
    # Symptoms: Skin and Hair
    SampleType.category_type(
        identifier='acne',
        display_title='Acne',
        doc='A category type that records acne as a symptom.'
    ),
    SampleType.category_type(
        identifier='drySkin',
        display_title='Dry Skin',
        doc='A category type that records dry skin as a symptom.'
    ),
    SampleType.category_type(
        identifier='hairLoss',
        display_title='Hair Loss',
        doc='A category type that records hair loss as a symptom.'
    ),
    # Symptoms: Sleep
    SampleType.category_type(
        identifier='nightSweats',
        display_title='Night Sweats',
        doc='A category type that records night sweats as a symptom.'
    ),
    SampleType.category_type(
        identifier='sleepChanges',
        display_title='Sleep Changes',
        doc='A category type that records sleep changes as a symptom.'
    ),
    SampleType.category_type(
        availability=Availability(iOS='18.0', macOS='15.0', watchOS='11.0'),
        identifier='sleepApneaEvent',
        display_title='Sleep Apnea',
        doc='A category type that records sleep apnea as a symptom.'
    ),
    # Symptoms: Urinary
    SampleType.category_type(
        identifier='bladderIncontinence',
        display_title='Bladder Incontinence',
        doc='A category type that records bladder incontinence as a symptom.'
    )
]


correlation_types = [
    SampleType.correlation_type(
        identifier='bloodPressure',
        display_title='Blood Pressure',
        doc='The sample type representing blood pressure correlation samples',
        associated_quantity_types=['bloodPressureDiastolic', 'bloodPressureSystolic']
    ),
    SampleType.correlation_type(
        identifier='food',
        display_title='Food',
        doc='Food correlation types combine any number of nutritional samples into a single food object.',
        associated_quantity_types=[
            # As defined [here](https://developer.apple.com/documentation/healthkit/data_types/nutrition_type_identifiers)
            # Macronutrients
            'dietaryEnergyConsumed',
            'dietaryCarbohydrates',
            'dietaryFiber',
            'dietarySugar',
            'dietaryFatTotal',
            'dietaryFatMonounsaturated',
            'dietaryFatPolyunsaturated',
            'dietaryFatSaturated',
            'dietaryCholesterol',
            'dietaryProtein',
            # Vitamins
            'dietaryVitaminA',
            'dietaryThiamin',
            'dietaryRiboflavin',
            'dietaryNiacin',
            'dietaryPantothenicAcid',
            'dietaryVitaminB6',
            'dietaryBiotin',
            'dietaryVitaminB12',
            'dietaryVitaminC',
            'dietaryVitaminD',
            'dietaryVitaminE',
            'dietaryVitaminK',
            'dietaryFolate',
            # Minerals
            'dietaryCalcium',
            'dietaryChloride',
            'dietaryIron',
            'dietaryMagnesium',
            'dietaryPhosphorus',
            'dietaryPotassium',
            'dietarySodium',
            'dietaryZinc',
            # Hydration
            'dietaryWater',
            # Caffeination
            'dietaryCaffeine',
            # Ultratrace Minerals
            'dietaryChromium',
            'dietaryCopper',
            'dietaryIodine',
            'dietaryManganese',
            'dietaryMolybdenum',
            'dietarySelenium'
        ]
    )
]

clinical_types = [
    SampleType.clinical_type(
        identifier='allergyRecord',
        display_title='Allergy Record',
        doc='A type identifier for records of allergic or intolerant reactions.'
    ),
    SampleType.clinical_type(
        identifier='clinicalNoteRecord',
        display_title='Clinical Note Record',
        doc='A type identifier for records of clinical notes.'
    ),
    SampleType.clinical_type(
        identifier='conditionRecord',
        display_title='Condition Record',
        doc='A type identifier for records of a condition, problem, diagnosis, or other event.'
    ),
    SampleType.clinical_type(
        identifier='immunizationRecord',
        display_title='Immunization Record',
        doc='A type identifier for records of the current or historical administration of vaccines.'
    ),
    SampleType.clinical_type(
        identifier='labResultRecord',
        display_title='Lab Result Record',
        doc='A type identifier for records of lab results.'
    ),
    SampleType.clinical_type(
        identifier='medicationRecord',
        display_title='Medication Record',
        doc='A type identifier for records of medication.'
    ),
    SampleType.clinical_type(
        identifier='procedureRecord',
        display_title='Procedure Record',
        doc='A type identifier for records of procedures.'
    ),
    SampleType.clinical_type(
        identifier='vitalSignRecord',
        display_title='Vital Sign Record',
        doc='A type identifier for records of vital signs.'
    ),
    SampleType.clinical_type(
        identifier='coverageRecord',
        display_title='Coverage Record',
        doc='A type identifier for records containing information about the user’s insurance coverage.'
    )
]


gen_inputs = [
    ('Quantity', 'Quantities', 'HKQuantitySample', 'HKQuantityType', 'quantity', quantity_types),
    ('Category', 'Categories', 'HKCategorySample', 'HKCategoryType', 'category', category_types),
    ('Correlation', 'Correlations', 'HKCorrelation', 'HKCorrelationType', 'correlation', correlation_types),
    ('Clinical Record', 'Clinical Records', 'HKClinicalRecord', 'HKClinicalType', 'clinical', clinical_types)
]
}%

// NOTE: This file was automatically generated and should not be edited.
// swiftlint:disable all

import HealthKit


/// Selects one of the specified units, based on the current locale.
@inlinable func localeDependentUnit(
    us: @autoclosure () -> HKUnit,
    uk: @autoclosure () -> HKUnit? = nil,
    metric: @autoclosure () -> HKUnit
) -> HKUnit {
    switch Locale.current.measurementSystem {
    case .us: us()
    case .uk: uk() ?? metric()
    case .metric: metric()
    default: metric()
    }
}


% for (display_title, display_title_plural, hk_class, hk_sampletype_class, ctor, types) in gen_inputs:

// MARK: ${display_title} Types

% if hk_class == 'HKClinicalRecord':
@available(watchOS, unavailable)
% end
extension SampleType where Sample == ${hk_class} {
% for ty in types:
    /// ${ty.doc}
% if ty.availability is not None:
    @available(${', '.join(ty.availability.components())}, *)
% end
    @inlinable public static var ${ty.property_name}: SampleType<${hk_class}> {
        .${ctor}(
            .${ty.identifier},
            displayTitle: "${ty.display_title}"${',' if len(ty.extra_init_params) > 0 else ''}
        % for idx, (key, value) in enumerate(ty.extra_init_params):
            ${key}: ${value}${',' if idx < len(ty.extra_init_params) - 1 else ''}
        % end
        )
    }
% end

%{
def make_hashtag_availability_for_if(availability: Availability, trailing_comma: bool) -> str:
    if availability is None:
        return ''
    else:
        return f'#available({', '.join(availability.components())}, *){', ' if trailing_comma else ''}'
}%
    /// Returns the shared ${display_title} type for the specified identifier.
    public init?(_ identifier: ${hk_sampletype_class}Identifier) where Sample == ${hk_class} {
        if ${make_hashtag_availability_for_if(types[0].availability, True)}identifier == .${types[0].identifier} {
            self = .${types[0].property_name}
        % for ty in types[1:]:
        } else if ${make_hashtag_availability_for_if(ty.availability, True)}identifier == .${ty.identifier} {
            self = .${ty.property_name}
        % end
        } else {
            return nil
        }
    }
}

extension ${hk_sampletype_class} {
    /// All well-known `${hk_sampletype_class}`s
    public static let allKnown${''.join(display_title_plural.split())}: Set<${hk_sampletype_class}> = Set(
        ${hk_sampletype_class}Identifier.allKnownIdentifiers.map { ${hk_sampletype_class}($0) }
    )
}

extension ${hk_sampletype_class}Identifier {
    /// All well-known `${hk_sampletype_class}Identifier`s
    public static let allKnownIdentifiers: Set<${hk_sampletype_class}Identifier> = {
        var identifiers = Set<${hk_sampletype_class}Identifier>()
        % for ty in types:
        % availability_check = make_hashtag_availability_for_if(ty.availability, False)
        % if availability_check != '':
        if ${availability_check} {
            identifiers.insert(Self.${ty.identifier})
        }
        % else:
        identifiers.insert(Self.${ty.identifier})
        % end
        % end
        return identifiers
    }()
}
% end

extension HKObjectType {
    /// All well-known `HKObjectType`s
    public static let allKnownObjectTypes: Set<HKObjectType> = {
        var types = Set<HKObjectType>()
        % for (display_title, display_title_plural, hk_class, hk_sampletype_class, ctor, types) in gen_inputs:
        types.formUnion(${hk_sampletype_class}.allKnown${''.join(display_title_plural.split())})
        % end
        return types
    }()
}
